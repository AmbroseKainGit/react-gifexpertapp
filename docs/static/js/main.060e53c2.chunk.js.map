{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","gif","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBe,SAACP,GACpBF,EAAcE,EAAEQ,OAAOF,a,8BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAAUH,GADpF,sBAEEI,MAAMF,GAFR,cAEfG,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARjB,kBAWdM,GAXc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAaxC,OAPAC,qBAAU,WAERxB,EAAQC,GACLwB,MAAK,SAAAhB,GAAI,OAAIc,EAAS,CAAEf,KAAMC,EAAMY,SAAS,SAE/C,CAACpB,IAEGqB,EDXyBI,CAAazB,GAA/BQ,EAFyB,EAE/BD,KAAYa,EAFmB,EAEnBA,QAEpB,OACE,qCACE,oBAAIJ,UAAU,mCAAd,SAAkDhB,IACjDoB,GAAW,mBAAGJ,UAAU,wCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAEIR,EAAKC,KAAI,SAACiB,GAAD,OACP,wBAAC,EAAD,2BAAiBA,GAAjB,IAAsBC,IAAKD,EAAIf,eEU5BiB,EArBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,QADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,qCACE,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBACA,6BACG4C,EAAWpB,KAAI,SAAAF,GAAI,OAClB,cAAC,EAAD,CACEP,SAAUO,GACLA,Y,MCbjBuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.060e53c2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const handleChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories(cats => [inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=byrEvMkTFm8QEgzB9OJfHAMEn9TcQYAr&q=${encodeURI(category)}&limit=10`\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  });\r\n  return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data: gifs, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__pulse'>{category}</h3>\r\n      {loading && <p className='animate__animated animate__rubberBand'>Loading</p>}\r\n      <div className='card-grid'>\r\n        {\r\n          gifs.map((gif) => (\r\n            <GifGridItem {...gif} key={gif.id} />\r\n          )\r\n          )}\r\n\r\n      </div>\r\n    </>\r\n\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n\r\n    getGifs(category)\r\n      .then(gifs => setState({ data: gifs, loading: false }));\r\n\r\n  }, [category]);\r\n\r\n  return state;\r\n}\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['DBZ']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n\r\n      <AddCategory setCategories={setCategories} />\r\n\r\n      <hr />\r\n      <ol>\r\n        {categories.map(data =>\r\n          <GifGrid\r\n            category={data}\r\n            key={data}\r\n          />\r\n        )}\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}